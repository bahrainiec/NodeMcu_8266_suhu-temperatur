#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <DHT.h>

// WiFi credentials
const char* ssid = "AndrianRsk";   // Change to your actual WiFi name
const char* password = "12345678";          // Change to your actual WiFi password

// Number of connection attempts before resetting
#define MAX_WIFI_ATTEMPTS 20

#define DHTPIN D3    // GPIO0 = D3 on NodeMCU

// Uncomment the type of sensor in use:
#define DHTTYPE    DHT11     // DHT 11
//#define DHTTYPE    DHT22     // DHT 22 (AM2302)
//#define DHTTYPE    DHT21     // DHT 21 (AM2301)

DHT dht(DHTPIN, DHTTYPE);

// inisialisasi Bot Token
#define BOTtoken "7657025376:AAHUE8XvoMRdFdf7qH2_jyF8ubGe0o5d73M"  // Bot Token dari BotFather

// chat id dari @myidbot
#define CHAT_ID "7007348071"

X509List cert(TELEGRAM_CERTIFICATE_ROOT);
WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

int botRequestDelay = 1000;
unsigned long lastTimeBotRan;

void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i=0; i<numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    
    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;

    if (text == "/start") {
      String control = "Selamat Datang, " + from_name + ".\n";
      control += "Gunakan Commands Di Bawah Untuk Monitoring DHT11\n\n";
      control += "/Temperatur Untuk Monitoring Suhu \n";
      control += "/Humidity Untuk Monitoring Kelembapan \n";
      bot.sendMessage(chat_id, control, "");
    }

    if (text == "/Temperatur") {
      float t = dht.readTemperature();
      if (isnan(t)) {
          Serial.println(F("Failed to read from DHT sensor!"));
          return;
      }
      String suhu = "Status Suhu ";
      suhu += t;
      suhu +=" ⁰C\n";
      bot.sendMessage(chat_id, suhu, "");
    }
    
    if (text == "/Humidity") {
      float h = dht.readHumidity();
      if (isnan(h)) {
          Serial.println(F("Failed to read from DHT sensor!"));
          return;
      }
      String lembab = "Status Kelembapan ";
      lembab += h;
      lembab +=" %Rh\n";
      bot.sendMessage(chat_id, lembab, "");
    }
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("\n\n");
  Serial.println("Starting DHT Telegram Bot on NodeMCU ESP8266");
  dht.begin();
  
  // Connect to WiFi with improved handling
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < MAX_WIFI_ATTEMPTS) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    Serial.print("Signal strength (RSSI): ");
    Serial.println(WiFi.RSSI());
    
    // Set time via NTP, as required for x.509 validation
    configTime(0, 0, "pool.ntp.org", "time.nist.gov");
    Serial.println("Waiting for NTP time sync...");
    time_t now = time(nullptr);
    while (now < 8 * 3600 * 2) {
      delay(500);
      Serial.print(".");
      now = time(nullptr);
    }
    Serial.println("");
    
    // Certificate setup for ESP8266
    client.setTrustAnchors(&cert);
    Serial.println("Certificate setup done");
  } else {
    Serial.println("\nFailed to connect to WiFi. Please check your credentials or router settings.");
    Serial.println("Restarting ESP8266...");
    ESP.restart();
  }
}

void loop() {
  if (millis() > lastTimeBotRan + botRequestDelay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while(numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
}
